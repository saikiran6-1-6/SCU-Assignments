// Algorithm with Pseudocode to Identify Top and Bottom Five Students by Total Marks


// Abstract Class: FileProcessor
ABSTRACT CLASS FileProcessor
    ABSTRACT METHOD readFile(fileName)
END CLASS

// Class: CSVFileProcessor (inherits FileProcessor)
CLASS CSVFileProcessor EXTENDS FileProcessor
    PRIVATE LIST studentRecords
    PRIVATE STRING unitName
    PRIVATE INTEGER validRecords

    METHOD readFile(fileName)
        // 1 - Initialize variables
        SET studentRecords = empty list
        SET unitName = empty string
        SET validRecords = 0

        // 2 - Check if file exists
        IF fileName is empty THEN
            OUTPUT "File Name Cannot Be Empty"
            RETURN false
        END IF
        IF file does not exist THEN
            OUTPUT "File Not Found"
            RETURN false
        END IF

        // 3 - Read file and handle boundary cases
        OPEN file fileName
        READ first line into unitName
        IF unitName is empty THEN
            OUTPUT "Error: File is empty or missing unit name"
            CLOSE file
            RETURN false
        END IF
        WHILE NOT end of file DO
            READ next line into line
            IF line is empty OR line starts with "#" THEN // Ignore comments and empty lines
                CONTINUE to next line
            END IF
            PARSE line into lastName, firstName, studentID, mark1, mark2, mark3
            // Validate student data
            IF lastName is empty OR firstName is empty OR studentID is empty THEN
                OUTPUT "Warning: Skipping record with missing name or ID"
                CONTINUE
            END IF
            // Check for empty marks and warn user
            SET emptyFields = empty list
            IF mark1 is empty THEN
                ADD "A1" to emptyFields
                SET mark1 = 0
            END IF
            IF mark2 is empty THEN
                ADD "A2" to emptyFields
                SET mark2 = 0
            END IF
            IF mark3 is empty THEN
                ADD "A3" to emptyFields
                SET mark3 = 0
            END IF
            IF emptyFields is not empty THEN
                OUTPUT "Warning: Missing marks for ", firstName, " ", lastName, " (Student ID: ", studentID, ") in fields ", emptyFields
                OUTPUT "Consider updating the missing fields to include this record in calculations"
            END IF
            // Validate marks (assuming marks are between 0 and 30 per assignment)
            SET validMarks = true
            FOR each mark in (mark1, mark2, mark3) DO
                IF mark is not a number OR mark < 0 OR mark > 30 THEN
                    OUTPUT "Warning: Invalid mark in record for ", firstName, " ", lastName
                    SET validMarks = false
                    BREAK
                END IF
            END FOR
            IF validMarks THEN
                CREATE student = new Student(lastName, firstName, studentID, mark1, mark2, mark3)
                ADD student to studentRecords
                INCREMENT validRecords
            ELSE
                OUTPUT "Warning: Skipping record with invalid marks"
            END IF
        END WHILE
        CLOSE file
        RETURN true
    END METHOD

    METHOD getStudentRecords()
        RETURN studentRecords
    END METHOD

    METHOD getUnitName()
        RETURN unitName
    END METHOD

    METHOD getValidRecords()
        RETURN validRecords
    END METHOD
END CLASS

// Class: Person
CLASS Person
    PROTECTED STRING lastName
    PROTECTED STRING firstName
    PROTECTED STRING id

    CONSTRUCTOR(lastName, firstName, id)
        SET this.lastName = lastName
        SET this.firstName = firstName
        SET this.id = id
    END CONSTRUCTOR

    METHOD displayDetails()
        OUTPUT firstName, " ", lastName, ", ID: ", id
    END METHOD
END CLASS

// Class: Student (inherits Person)
CLASS Student EXTENDS Person
    PRIVATE FLOAT mark1
    PRIVATE FLOAT mark2
    PRIVATE FLOAT mark3
    PRIVATE FLOAT totalMarks

    CONSTRUCTOR(lastName, firstName, studentID, mark1, mark2, mark3)
        CALL Person(lastName, firstName, studentID)
        SET this.mark1 = mark1
        SET this.mark2 = mark2
        SET this.mark3 = mark3
        SET this.totalMarks = mark1 + mark2 + mark3 // Total marks as sum of A1, A2, A3
    END CONSTRUCTOR

    METHOD getTotalMarks()
        RETURN totalMarks
    END METHOD

    METHOD displayDetails()
        // Override for polymorphic behavior
        OUTPUT firstName, " ", lastName, ", Student ID: ", id, ", Total Marks: ", totalMarks
    END METHOD
END CLASS

BEGIN
    // 1 - Get and Validate Inputs From User
    GET fileName from user

    // 2 - Create FileProcessor
    CREATE fileProcessor = new CSVFileProcessor()

    // 3 - Read file using FileProcessor
    IF NOT fileProcessor.readFile(fileName) THEN
        EXIT
    END IF

    // 4 - Get data from FileProcessor
    SET unitName = fileProcessor.getUnitName()
    SET studentRecords = fileProcessor.getStudentRecords()
    SET validRecords = fileProcessor.getValidRecords()

    // 5 - Validating student records
    IF validRecords = 0 THEN
        OUTPUT "No Valid Student Records Found"
        EXIT
    END IF

    // 6 - Sort studentRecords by total marks (sum of A1, A2, A3)
    FOR i = 0 TO length(studentRecords) - 1 DO
        FOR j = 0 TO length(studentRecords) - i - 1 DO
            IF studentRecords[j].getTotalMarks() < studentRecords[j+1].getTotalMarks() THEN
                SWAP studentRecords[j] with studentRecords[j+1]
            END IF
        END FOR
    END FOR

    // 7 - Print top 5 students
    OUTPUT "Unit: ", unitName
    OUTPUT "Top 5 students by total marks (sum of A1, A2, A3)"
    IF validRecords < 5 THEN
        OUTPUT "Note: Fewer than 5 students available"
    END IF
    SET count = MIN(5, validRecords)
    FOR i = 0 TO count - 1 DO
        CALL studentRecords[i].displayDetails()
    END FOR

    // 8 - Print bottom 5 students
    OUTPUT "Bottom 5 students by total marks (sum of A1, A2, A3)"
    IF validRecords < 5 THEN
        OUTPUT "Note: Fewer than 5 students available"
    END IF
    SET startIndex = MAX(0, length(studentRecords) - 5)
    FOR i = startIndex TO length(studentRecords) - 1 DO
        CALL studentRecords[i].displayDetails()
    END FOR
END